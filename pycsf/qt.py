"""Wrapper around Qt libraries to provide a consistent interface across PyQt4, PyQt5, PyQt6, and PySide2.
"""
"""Wrapper around Qt libraries to make it easier to swap out backends in the future
"""
import os
import sys

import pyqtgraph as pg

# make one large namespace containing everything; pyqtgraph handles translation
# between different Qt versions
for mod in [pg.Qt, pg.Qt.QtGui, pg.Qt.QtCore, pg.Qt.QtTest, pg.Qt.QtWidgets]:
    ns = mod.__dict__.copy()
    # don't copy special variables like __name__, __file__, etc.
    for k in list(ns.keys()):
        if k.startswith('__'):
            ns.pop(k)
    globals().update(ns)

# signal disconnect with exception handling
# allows (calling disconnect even if no connection currently exists)
disconnect = pg.disconnect


def loadUiType(uiFile, package=None):
    if QT_LIB == PYQT5:
        from PyQt5 import uic
    elif QT_LIB == PYQT6:
        from PyQt6 import uic
    elif QT_LIB == PYSIDE2:
        from PySide2 import uic
    else:
        raise ImportError("compileUi could not be imported from PyQt5, PyQt6 or PySide2")
    import xml.etree.ElementTree as xml

    parsed = xml.parse(uiFile)
    widget_class = parsed.find('widget').get('class')
    form_class = parsed.find('class').text

    if package is None:
        globalns = {}
    else:
        globalns = {'__package__': package}

    # load, compile, and execute ui code
    o = _StringIO()
    uic.compileUi(open(uiFile, 'r'), o, indent=0)
    pyc = compile(o.getvalue(), uiFile, 'exec')
    exec(pyc, globalns)

    # Fetch the base_class and form class based on their type in the xml from designer
    form_class = globalns[f'Ui_{form_class}']
    base_class = getattr(QtWidgets, widget_class)

    return form_class, base_class


def importTemplate(templateName):
    """Return the template class generated by a .ui file for the Qt system 
    currently in use.
    
    If the module path is relative (starts with "."), then the root package is
    inferred by inspecting the frame stack.
    
    For example::
    
        Ui_MainWindow = Qt.importTemplate('.MyTemplate')
        
        # For PyQt4, this is equivalent to
        from .MyTemplate import Ui_MainWindow
        
        # for PyQt5, this is equivalent to
        from .MyTemplate_pyqt5 import Ui_MainWindow
    """
    frame = sys._getframe().f_back
    pkg = frame.f_globals['__package__']

    # Find location of calling module
    modParts = pkg.split('.')
    mod = sys.modules[modParts.pop(0)]
    root = os.path.dirname(mod.__file__)

    # construct full path to ui file
    ndots = len(templateName) - len(templateName.lstrip('.'))
    if ndots > 1:
        modParts = modParts[:-ndots]
    pathParts = modParts + templateName.lstrip('.').split('.')
    uipath = os.path.join(root, *pathParts) + '.ui'
    if not os.path.isfile(uipath):
        raise ValueError("ui file not found: %r" % uipath)
    return loadUiType(uipath, package=pkg)[0]
